<?php

/**
 * @file
 * Allows users to add ting items to wish list.
 */

module_load_include('inc', 'ding_bookmark', 'ding_bookmark.flag_ding_entity');

/**
 * Implements hook_init().
 */
function ding_bookmark_init() {
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_menu().
 */
function ding_bookmark_menu() {
  $items = array();

  $items['ding_bookmark/nojs/bookmark/%'] = array(
    'page callback' => 'ding_bookmark_bookmark_item_ajax',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_bookmark/ajax/bookmark/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['ding_bookmark/nojs/bookmark/%'];

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ding_bookmark_menu_alter(&$items) {
  foreach ($items as $path => $item) {
    if ($path == 'user/%pm_arg/status/bookmarks') {
      $items[$path]['title callback'] = 'ding_bookmark_menu_item_title';
    }
  }
}

/**
 * Implements hook_theme().
 */
function ding_bookmark_theme() {
  return array(
    'ding_bookmark_remove_form' => array(
      'render element' => 'form',
      'file' => 'ding_bookmark.pages.inc',
    ),
  );
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Kill the views for the default bookmarks flag. They clash with our
 * paths. Disabling them doesn't seem to be enough.
 */
function ding_bookmark_views_default_views_alter(&$views) {
  if (!empty($views['flag_bookmarks'])) {
    unset($views['flag_bookmarks']);
  }
  if (!empty($views['flag_bookmarks_tab'])) {
    unset($views['flag_bookmarks_tab']);
  }
}

/**
 * Title callback; Alter title to add count items number.
 *
 * @param $title
 *  Untranslated title.
 * @param $account
 *  User account object, for counting bookmark items.
 */
function ding_bookmark_menu_item_title($title, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  return t($title) . ' (' . flag_load('bookmark')->get_user_count_number($account->uid) . ')';
}

/**
 * Access callback; Check user access to bookmark.
 */
function ding_bookmark_view_access($account) {
  global $user;
  return $user->uid == $account->uid || $user->uid == 1;
}

/**
 * Bookmark count callback.
 *
 * @param $account
 *  User account object, for counting bookmark items.
 */
function ding_bookmark_count_number($account = NULL) {
  global $user;
  if (is_null($account)) {
    $account = $user;
  }
  return flag_load('bookmark')->get_user_count_number($account->uid);
}


/**
 * Implements hook_flag_definitions().
 */
function ding_bookmark_flag_definitions() {
  return array(
    'ding_entity' => array(
      'title' => t('Ding entities'),
      'description' => '',
      'handler' => 'flag_ding_entity',
    ),
  );
}

/**
 * Implements hook_flag_default_flags().
 */
function ding_bookmark_flag_default_flags() {
  $flags = array();
  // Add flag "Bookmark".
  $flags['bookmark'] = array(
    'content_type' => 'ding_entity',
    'name' => 'bookmark',
    'title' => 'Bookmarks',
    'global' => '0',
    'types' => array(),
    'flag_short' => 'Add to bookmarks',
    'flag_long' => '',
    'flag_message' => 'Added to bookmarks',
    'flagged_already_message' => 'This item is in bookmarks already.',
    'unflag_short' => 'Remove from bookmarks',
    'unflag_long' => '',
    'unflag_message' => 'Removed from bookmarks',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'roles' => array(
      'flag' => array(
        0 => '2',
      ),
      'unflag' => array(
        0 => '2',
      ),
    ),
    'api_version' => 2,
    'locked' => array(
      'name',
      'types',
      'global',
      'link_type',
      'roles',
    ),
  );
  return $flags;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_bookmark_form_flag_form_alter(&$form, &$form_state, $form_id) {
  // Remove unnecessary parameters.
  unset($form['display']['link_options_intro'], $form['display']['link_options_confirm']);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_bookmark_ding_entity_buttons($type, $entity) {
  // Add 'bookmark' button.
  if ($type == 'ding_entity') {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    drupal_add_js(drupal_get_path('module', 'ding_bookmark') . '/js/ding_bookmark.js');
    $bookmark_flag_button = ding_bookmark_flag_view($type, $entity);
    return array($bookmark_flag_button);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_bookmark_form_flag_confirm_alter(&$form, &$form_state, $form_id) {
  if ($form['flag_name']['#value'] == 'bookmark') {
    // Flag module does not allow flag/unflag to anonymous users.
    // Custom submit handler will show login popup to user instead of "You are not allowed to flag...".
    $form['#native_submit'] = $form['#submit'];
    $form['#submit'] = array('ding_bookmark_form_flag_confirm_submit');

    // Implement ajax functionality.
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'ding_bookmark_flag_confirm_form_callback',
      'wrapper' => 'ding-bookmark-flag-confirm-form',
    );

    // Remove 'cancel' link.
    unset($form['actions']['cancel']);
  }
}

/**
 * Submit handler.
 *
 * Provides login popup for anonymous users, otherwise invoke native handlers
 */
function ding_bookmark_form_flag_confirm_submit($form, &$form_state) {
  global $user;

  // Popup login form.
  if (!$user->uid) {
    throw new DingProviderAuthException;
    return;
  }

  $bookmark_flag = flag_get_flag('bookmark');
  $entity_id = $form['content_id']['#value'];

  if ($bookmark_flag->is_flagged($entity_id)) {
    // Generate message for the user.
    $form_state['storage']['response_html'] = t($bookmark_flag->flagged_already_message);
  }
  else {
    // Invoke native submit handlers.
    foreach ($form['#native_submit'] as $function) {
      if (function_exists($function)) {
        $function($form, $form_state);
      }
    }
    // Generate message for the user.
    $form_state['storage']['response_html'] = t($bookmark_flag->flag_message);
  }
}

/**
 * Ajax callback.
 */
function ding_bookmark_flag_confirm_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  // Drop messages.
  theme('status_messages');
  // Get generated message.
  $html = '<div class="ding-bookmark-message">' . $form_state['storage']['response_html'] . '</div>';
  // Popup.
  $response['#commands'][] = ajax_command_ding_popup('ding_bookmark', t('Bookmark'), $html);

  // Update the user login box.
  if (module_exists('artesis_backend')) {
    $resfresh_commands = artesis_backend_refresh_login();

    foreach ($resfresh_commands as $command) {
      $response['#commands'][] = $command;
    }
  }

  return $response;
}

/**
 * Build 'add to bookmark' button.
 */
function ding_bookmark_flag_view($entity_type, $entity) {
  $bookmark_flag = flag_get_flag('bookmark');

  $ding_entity_info = ding_entity_info($entity_type);
  $entity_info = entity_get_info($ding_entity_info['entity_type']);
  $entity_id = $entity->{$entity_info['entity keys']['id']};
  // Confirm form will change page title.
  // Store native title.
  $page_native_title = drupal_get_title();

  // Add destination (for no-js).
  $link_query = drupal_get_destination() + array('token' => flag_get_token($entity_id));

  $flag_confirm_form = array(
    array(
      '#prefix' => '<div class="bookmark-link-ajax">',
      '#suffix' => '</div>',
      '#markup' => l(
        t('Add to bookmarks'),
        'ding_bookmark/nojs/bookmark/' . $entity_id,
        array(
          'attributes' => array('class' => array('use-ajax')),
          'absolute' => TRUE,
          'query' => $link_query,
        )
      ),
    ),
  );

  // Restore title.
  drupal_set_title($page_native_title);

  return $flag_confirm_form;
}

/**
 * Display a bookmark item.
 */
function ding_bookmark_item_view($entity_type, $entity_id) {
  $type_info = ding_entity_info($entity_type);
  $entities = entity_load($type_info['entity_type'], array($entity_id));
  $entity = reset($entities);
  // Library code can be changed at any time by the site administrator.
  // Every time when bookmark item is loaded,
  //  module should check, whether item is available in the current library.
  // If item does not exists in the library it shoul be deleted from bookmark.
  if (!$entity) {
    // Remove item.
    $flag = flag_get_flag('bookmark');
    $flag->flag('unflag', $entity_id);
    return FALSE;
  }

  $build = ding_entity_view($entity, 'user_list');
  return $build;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_bookmark_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ding_bookmark_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Menu entry callback.
 *
 * Logic for dynamic bookmark form fetching and using.
 * Requests bookmark form, appends it to the end of the page markup,
 * and simulates a click.
 *
 * @param $item_id
 *   Bookmarked item id.
 * @see ding_bookmark_flag_view().
 *
 * @return
 *   Array of ajax commands.
 */
function ding_bookmark_bookmark_item_ajax($type, $item_id) {
  $commands = array();

  // Detect AJAX call.
  $ajax = ($type == 'ajax');

  if (!empty($item_id)) {
    $bookmark_flag = flag_get_flag('bookmark');

    if ($ajax) {
      $bookmark_form = drupal_render(ding_provider_get_form('flag_confirm', 'flag', $bookmark_flag, $item_id));
      $commands[] = ajax_command_invoke('body', 'append', array($bookmark_form));
      // Initialize custom drupal js behavior.
      $commands[] = ding_bookmark_command_init_behavior($item_id);

      // Update the user login box.
      if (module_exists('artesis_backend')) {
        $resfresh_commands = artesis_backend_refresh_login();

        foreach ($resfresh_commands as $command) {
          $commands[] = $command;
        }
      }
    }
    else {
      // No-js case: flag without confirmation & redirect back.
      $bookmark_flag->flag('flag', $item_id);
      drupal_goto();
    }
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/**
 * Initialize custom drupal js behaviors.
 *
 * @param $item_id
 *   Bookmarked item id.
 *   A numeric value to be passed further to JS.
 * @see ding_bookmark_bookmark_item_ajax().
 *
 * @return
 *   Array of ajax commands in case of $item_id, nothing otherwise.
 */
function ding_bookmark_command_init_behavior($item_id = '') {
  if (!empty($item_id)) {
    return array(
      'command' => 'init_behavior',
      'data' => $item_id,
    );
  }
}

